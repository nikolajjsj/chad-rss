package web

import (
query "chad-rss/internal/database/sqlc"
"fmt"
timeago "github.com/xeonx/timeago"
)

type FeedProps struct {
Feed query.GetFeedByIDRow
ArticleID string
}

templ Feed(p FeedProps) {
@Base(
"Feed",
feedContent(p.Feed),
) {
<div id="article-page" class="text-center" hx-get={ fmt.Sprintf("/articles/%s", p.ArticleID) }>
	<h3 class="mt-2 text-sm font-semibold text-gray-900">No article</h3>
	<p class="mt-1 text-sm text-gray-500">Select a article to the left</p>
</div>
}
}

templ feedContent(f query.GetFeedByIDRow) {
<div class="flex flex-col justify-between gap-y-2 py-5">
	<div class="flex min-w-0 gap-x-4">
		<img class="h-10 w-10 flex-none rounded bg-gray-50" src={ f.Image.String } alt="feed image" />
		<div class="min-w-0 flex-auto">
			<p class="text-sm font-semibold leading-6 text-gray-900">{ f.Title }</p>
			<p class="truncate text-xs leading-5 text-gray-500">{ f.Summary.String }</p>
		</div>
	</div>
	@feedActions(f)
</div>
<ul role="list" class="divide-y divide-gray-100">
	<div hx-get={ fmt.Sprintf("/feeds/%s/articles", f.Nid) } hx-trigger="load"></div>
</ul>
}

templ FeedList(feedNid string, page int, articles []query.GetUserFeedArticlesRow) {
for idx, a := range articles {
if idx == len(articles) - 1 {
<li hx-get={ fmt.Sprintf("/feeds/%s/articles?page=%d", feedNid, page) } hx-trigger="intersect once" hx-swap="afterend"
	class="group -mx-2 px-2 py-4 rounded cursor-pointer hover:bg-gray-50">
	@feedListItem(a)
</li>
} else {
<li class="group -mx-2 px-2 py-4 rounded cursor-pointer hover:bg-gray-50">
	@feedListItem(a)
</li>
}
}
}

templ feedListItem(a query.GetUserFeedArticlesRow) {
<div hx-get={ fmt.Sprintf("/articles/%s", a.Nid) } hx-target="#article-page" class="flex min-w-0 gap-x-4">
	if a.Media.Valid {
	<img class="flex-none h-10 w-10 rounded bg-gray-50" src={ a.Media.String } alt="article image" />
	} else {
	<span
		class="flex h-10 w-10 shrink-0 items-center justify-center rounded-lg border border-gray-200 bg-white text-[0.625rem] font-medium text-gray-400 group-hover:border-indigo-600 group-hover:text-indigo-600">
		{ string([]rune(a.Title)[0]) }
	</span>
	}
	<div class="min-w-0 flex-auto">
		<p class="text-sm font-semibold leading-4 text-gray-900 group-hover:text-indigo-600">{ a.Title }</p>
		<p class="mt-1 line-clamp-2 text-sm leading-2 text-gray-600">{ a.Summary.String }</p>
		<time class="mt-1 text-xs leading-1 text-gray-500" datetime={ a.PublishedAt.Time.String() }>
			{ timeago.English.Format(a.PublishedAt.Time) }
		</time>
	</div>
</div>
}

templ feedActions(f query.GetFeedByIDRow) {
<div class="flex gap-2">
	<span class="isolate inline-flex rounded-md shadow-sm">
		<button type="button" hx-swap="none" hx-post={ fmt.Sprintf("/feeds/%s/sync", f.Nid) }
			class="relative rounded-md -ml-px inline-flex items-center bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-10">
			Sync
		</button>
	</span>
	<span class="isolate inline-flex rounded-md shadow-sm">
		<button type="button"
			class="relative inline-flex items-center rounded-l-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-10">
			Like
		</button>
		<button type="button"
			class="relative -ml-px inline-flex items-center rounded-r-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-10">
			Save
		</button>
	</span>
	<span class="isolate inline-flex rounded-md shadow-sm ml-auto">
		<button type="button" hx-swap="none" hx-delete={ fmt.Sprintf("/feeds/%s", f.Nid) }
			hx-confirm="Are you sure you want to delete this feed?"
			class="relative rounded-md -ml-px inline-flex items-center bg-white px-3 py-2 text-sm font-semibold text-red-900 ring-1 ring-inset ring-red-300 hover:bg-red-50 focus:z-10">
			Delete
		</button>
	</span>
</div>
}
